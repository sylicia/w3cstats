#! /usr/bin/env python3

from pygtail import Pygtail
import logging
import sys
import time
from datetime import datetime
import w3cstats

# LOG_LEVEL='DEBUG'
# LOG_LEVEL='INFO'
LOG_LEVEL='WARNING'

logger = logging.getLogger(__name__)
logger.setLevel(getattr(logging, LOG_LEVEL))
logging.basicConfig(format='[%(name)s %(levelname)s] %(message)s')
w3cstats.logger.setLevel(getattr(logging, LOG_LEVEL))

FILE_NAME="/tmp/access.log"
TOP_STATS=10
ALERT_LEVEL=10

def get_ranking(sections, metric):
    metric_extract = {}
    for section in sections:
        metric_extract[section] = getattr(sections[section], metric)
    ranking = sorted(metric_extract.items(), reverse=True, key=lambda x: x[1])

    return (ranking)
    print("Top {}".format(metric))

def display_summary(sections, date_time):
    print('--- Summary from {}'.format(date_time.strftime("%Y-%m-%d %H:%M:%S")))
    logger.info(sections)
    print("| Top hits")
    ranking = get_ranking(sections, 'hits')
    hits_cpt = 0
    for (key, value) in ranking:
        print("|   - {} : {}".format(key, value))
        hits_cpt += 1
        if  hits_cpt == TOP_STATS:
            break

    ranking = get_ranking(sections, 'error_rate')
    err_found = 0
    for (section, err_perc) in ranking:
        if err_perc > 0:
            err_found = 1
    if err_found == 0 :
        print("| Top errors: No error detected ;)")
    else:
        print("| Top errors")
        for (section, err_perc) in ranking:
            if err_perc > 0:
                print("|   - {} : {:.2f}%".format(key, err_perc))
            hits_cpt += 1
            if  hits_cpt == TOP_STATS:
                break
    print('------------------------------------')

def update_alerts(alerts, sections, curr_time):
    alt_time = w3cstats.to_period_alert(curr_time)
    alt_timestamp = alt_time.timestamp()
    if alt_timestamp not in alerts:
        # Analize last period
        sorted_dates = sorted(alerts.keys())
        if len(alerts.keys()) >= 1:
            last_timestamp = sorted(sorted_dates)[-1]
            if last_timestamp < alt_timestamp:
                alerts[last_timestamp].close(ALERT_LEVEL, curr_time)
        # Create new record
        alerts[alt_timestamp] = w3cstats.Alerts(curr_time, alt_time)
    for section in sections:
        alerts[alt_timestamp].add_section(sections[section])


if __name__ == '__main__':
    start_time = None
    sections = {}
    alerts = {}
    while True:
        try:
            for log_line in Pygtail(FILE_NAME):
                logger.debug("--- Start Read ---")
                log_parsed = w3cstats.parse_log(log_line)
                if not log_parsed:
                    continue
                if not start_time:
                    start_time = log_parsed['time_period']
                logger.info("Period: {} > {} = {}".format(log_parsed['time_period'], start_time, log_parsed['time_period'] > start_time))
                if log_parsed['time_period'] > start_time:
                    # Use the metrics
                    display_summary(sections, start_time)
                    update_alerts(alerts, sections, start_time)
                    # Start a new period
                    start_time = log_parsed['time_period']
                    logger.debug("Clean history")
                    sections = {}
                w3cstats.register_log(sections, log_parsed)
                logger.debug(" -- End Read ---")


        except FileNotFoundError as error:
            logger.critical(error)
            exit(1)
        time.sleep(1)
